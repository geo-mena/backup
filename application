#!/usr/bin/env php
<?php

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| We need to modify the autoloader path to work both when installed
| globally and locally. We'll check multiple possible locations.
|
*/

$possibleAutoloaderPaths = [
    // Local development
    __DIR__ . '/vendor/autoload.php',
    // Global installation via composer global require
    __DIR__ . '/../../autoload.php',
    // Installed as a dependency in another project
    __DIR__ . '/../../../vendor/autoload.php',
];

$autoloader = null;
foreach ($possibleAutoloaderPaths as $path) {
    if (file_exists($path)) {
        $autoloader = require $path;
        break;
    }
}

if ($autoloader === null) {
    fwrite(
        STDERR,
        'You need to set up the project dependencies using Composer:' . PHP_EOL . PHP_EOL .
            '    composer install' . PHP_EOL . PHP_EOL
    );
    die(1);
}

/*
|--------------------------------------------------------------------------
| Bootstrap The Application
|--------------------------------------------------------------------------
|
| We'll load the application bootstrap file from the correct location
| depending on how the package is installed.
|
*/

$bootstrapPaths = [
    __DIR__ . '/bootstrap/app.php',
    __DIR__ . '/../bootstrap/app.php',
];

$app = null;
foreach ($bootstrapPaths as $path) {
    if (file_exists($path)) {
        $app = require_once $path;
        break;
    }
}

if ($app === null) {
    fwrite(
        STDERR,
        'Could not find the bootstrap/app.php file.' . PHP_EOL
    );
    die(1);
}

/*
|--------------------------------------------------------------------------
| Run The Application
|--------------------------------------------------------------------------
|
| Handle the incoming command and generate the response.
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Gracefully shutdown the application.
|
*/

$kernel->terminate($input, $status);

exit($status);
